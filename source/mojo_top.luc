module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high  
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    input avr_tx,           // AVR TX (FPGA RX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output io_seg[8],         // output to io segment
    output io_sel[4]         // output to select io segment
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    fsm state = { SAVE_A, SAVE_B, COMPUTE};
    
    reset_conditioner reset_cond;
    .rst(rst){
      auto_test auto_test;
      generator generator;
      
      dff input_a[16]; //store instance of alu.a
      dff input_b[16]; //store instance of alu.b
      
    }
  }
  // Segment counter to cycle through the different segments
  dff seg_counter[20](.clk(clk), .rst(rst));
  alu alu;
  sig a[16];
  sig b[16];
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = 8h00; 
    alu.a=16h0; //instantiate a = 0
    alu.b=16h0; //instantiate b = 0
    
    
    // Toggle manual or auto-test 
    if (io_dip[0][6]==1){
      alu.alufn=io_dip[0];
      a = 00000000000000000000 | a; //a/b=0 if a/b has no other values
      b = 00000000000000000000 | b;
      alu.a = a;
      alu.b = b;
      io_led[0] = io_dip[0]; // connect DIP switches to the LEDs
      io_led[1] = alu.out[15:8]; //display output on first two rows of led
      io_led[2] = alu.out[7:0];
      

      
      
      case(state.q) { //FSM
      
      
        
          
        state.SAVE_A: //input and store A
          led = 8hff;
          input_a.d = 16b0;
          
          input_b.d = 16b0;
            
          if(io_button[3]){ //when left button is pressed
            io_led[1] = io_dip[1];
            io_led[2] = io_dip[2];
            input_a.d = c{io_dip[2], io_dip[1]};
            led = 8hff;
          state.d = state.SAVE_B;
        
            }
        state.SAVE_B: //input and store B
          led = 8hff;
          if(io_button[4]){ //when right button is pressed
          io_led[1] = io_dip[1];
          io_led[2] = io_dip[2];
          input_b.d = c{io_dip[2], io_dip[1]};
            led = 8hff;
          state.d = state.COMPUTE;
          }
        state.COMPUTE: //compute output
          if(io_button[1]){ //when centre button is pressed
          alu.a = input_a.q;
          alu.b = input_b.q;
          io_led[2] =alu.out[15:8];
          io_led[1]= alu.out[7:0];
            
            
            
            //state.d = state.SAVE_A;
            
          }          
          else if (rst) { //return to save_a state
          state.d = state.SAVE_A;
        }
      
      }
    }
           else { //auto-testing
      alu.alufn=io_dip[0];
      io_led[0] = io_dip[0];
      io_led[1] = io_dip[1];
      io_led[2] = io_dip[2];
      alu.a = generator.a; //get a,b and alufn values from generator
      alu.b = generator.b;
      alu.alufn=generator.alufn;
      

           
            
            if (auto_test.wrong_output==0){ //if output is correct
            io_led[2] =alu.out[15:8];
            io_led[1]= alu.out[7:0];
      }
           
         
      }
      
      
    
      
      
      

    
    
    
    // check for errors
    auto_test.alu_output = alu.out; 
    auto_test.testcase = generator.testcase;
    // indicate 'err' on seven segment
    if (io_dip[0][6]==0 && auto_test.wrong_output==1) {
      if(seg_counter.q<20b01000000000000000000){
          // 3rd segment, 'E'
          io_sel = ~4b0100;
          io_seg = ~8b01111001;        
      }
      else if (seg_counter.q<20b10000000000000000000){
          // 2nd segment, 'R'
          io_sel = ~4b0010;
          io_seg = ~8b00110001;        

      }
      else if (seg_counter.q<20b11000000000000000000){
          // 1st segment, 'R'
          io_sel = ~4b0001;
          io_seg = ~8b00110001;        

      } else {
          // 4th segment, blank
          io_sel = ~4b1000;
          io_seg = ~8b00000000;      
      }
    }  else {
      // off when not in use
      io_sel = 0;
      io_seg = ~8b0;
    }
    seg_counter.d = seg_counter.q+1;
  }
}